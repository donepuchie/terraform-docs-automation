name: Docker Build and MkDocs Test

# Trigger the workflow on push to the main branch or on pull requests
on:
  workflow_dispatch:
  push:
    branches:
      - main

# Define jobs
jobs:
  build:
    # Use the latest Ubuntu environment
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository containing the Dockerfile
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Docker in the GitHub Actions runner
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Cache Docker layers for faster subsequent builds
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    # Build the Docker image
    - name: Build the Docker image
      run: |
        docker build -t my-image-name .

    # Run the container and check if `gcp/modules` is copied
    - name: Test if gcp/modules is copied
      run: |
        docker run --rm my-image-name ls -la /usr/src/app/gcp/modules

    # List all files in the image (for debugging, optional)
    - name: List all files in the image
      run: |
        docker run --rm my-image-name ls -la /usr/src/app

    # Run the container in detached mode and expose port 8080 for MkDocs
    - name: Run container in detached mode for MkDocs
      run: |
        docker run -d -p 8080:8080 --name mkdocs-test my-image-name

    # Give MkDocs time to start
    - name: Wait for MkDocs to start
      run: sleep 10

    # Test if MkDocs is being served on port 8080 using curl
    - name: Check if MkDocs site is running on port 8080
      run: |
        curl --fail http://localhost:8080 || (echo "MkDocs is not running" && exit 1)

    # Clean up: Stop the MkDocs container and remove it
    - name: Clean up Docker container
      run: |
        docker stop mkdocs-test
        docker rm mkdocs-test

    # Clean up Docker images and containers to free up space
    - name: Clean up Docker
      run: |
        docker system prune -f

